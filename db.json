{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1},{"_id":"themes/hexo-theme-light/source/js/gallery.js","path":"js/gallery.js","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/hexo-theme-light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/hexo-theme-light/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":1},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":1},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":1},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":1}],"Cache":[{"_id":"source/404.html","shasum":"e7f7e6a86bb6a6ed3ce80a539d98a8321d7914c1","modified":1437126379982},{"_id":"source/_posts/JavaScript学习笔记之-标准全局对象-基本对象Object.md","shasum":"1ba72aa3acc860c874bcf029d02f188a6312f2b4","modified":1438318980836},{"_id":"source/_posts/JavaScript学习笔记之-标准全局对象-常量属性.md","shasum":"65a71393a04db3666cc1765b1d190dd6d255f3fd","modified":1438318989196},{"_id":"source/_posts/JavaScript学习笔记之-标准全局对象-方法属性.md","shasum":"171c3efab570b54a2a32b3810de103d4c4d0344b","modified":1438318993100},{"_id":"source/_posts/JavaScript学习笔记之-编程习惯和注意点.md","shasum":"2c10b0500e8a1b190a6923a3b41e5da26bbc89a1","modified":1437442887704},{"_id":"source/_posts/Node.js学习笔记之-常用模块.md","shasum":"70c84e83645887e02f1bd2bcabfba7b9770ed549","modified":1438230754483},{"_id":"source/_posts/hello-world.md","shasum":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1436968144107},{"_id":"source/_posts/module-exports和exports的区别.md","shasum":"3c945171dbe0266ec06b3d8af7974e840e88db98","modified":1438321932682},{"_id":"source/_posts/supervisor-vs-pm2-vs-forever.md","shasum":"c146b7d4eaa171dba72d262762802b51f60b48d6","modified":1437368692709},{"_id":"source/_posts/常用工具.md","shasum":"6087c3561da5e3af8f3b5762ccab60d67e400b09","modified":1437564384524},{"_id":"source/_posts/我的vagrant相关命令.md","shasum":"41c365fb76d145ca4221ea2df5d7e88acb791e05","modified":1437116361603},{"_id":"source/_posts/深入浅出Node-js-前后端共用模块.md","shasum":"8a0e14e9934a96f02a7ef67e98289478557a6fd6","modified":1438673925520},{"_id":"source/_posts/深入浅出Node-js-核心模块.md","shasum":"6f64759a7340d753217f611ebb948d6091f36651","modified":1438665187803},{"_id":"source/_posts/深入浅出Node-js-模块加载.md","shasum":"0150daf8285b08a268bf810670417b083850101d","modified":1438319652334},{"_id":"source/_posts/深入浅出Node-js-特点与应用场景.md","shasum":"454da9335dbf839b5334bb2388a9bd63cf694fd6","modified":1438319335516},{"_id":"source/about/index.md","shasum":"4bcc6cb2c8967197d85f01f866cf2b54a5611ba8","modified":1437564212768},{"_id":"source/categories/index.html","shasum":"813b22cf273b0c691517852a624fa395942b584a","modified":1437026187827},{"_id":"source/tags/index.html","shasum":"cce43289f7be2cb8d418cdbedb83f906c3461f2c","modified":1437026210231},{"_id":"themes/hexo-theme-light/source/css/_base/utils.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1437120006699},{"_id":"themes/hexo-theme-light/LICENSE","shasum":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1437120006679},{"_id":"themes/hexo-theme-light/README.md","shasum":"aa189c7ff03c60d8fceb009f5fca1a61d8a0ecdf","modified":1437120006691},{"_id":"themes/hexo-theme-light/_config.yml","shasum":"8216651d5b423caf7906ebe7fe26327aa943d3c8","modified":1437121963831},{"_id":"themes/hexo-theme-light/languages/de.yml","shasum":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1437120006691},{"_id":"themes/hexo-theme-light/languages/default.yml","shasum":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1437120006691},{"_id":"themes/hexo-theme-light/languages/es.yml","shasum":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1437120006691},{"_id":"themes/hexo-theme-light/languages/ru.yml","shasum":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1437120006695},{"_id":"themes/hexo-theme-light/languages/zh-CN.yml","shasum":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1437120006695},{"_id":"themes/hexo-theme-light/languages/zh-TW.yml","shasum":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/after_footer.ejs","shasum":"be0905e9fb3730d63685b5db579875538a92de95","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/archive.ejs","shasum":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/article.ejs","shasum":"508fb3aaac2b68e6f24bd5259a0684e23f46fe37","modified":1437121120911},{"_id":"themes/hexo-theme-light/layout/_partial/comment.ejs","shasum":"2a8c3782d099c7496d84786140cd80f1d89cdd86","modified":1437120536818},{"_id":"themes/hexo-theme-light/layout/_partial/comment.ejs.bak","shasum":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/facebook_comment.ejs","shasum":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/footer.ejs","shasum":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/google_analytics.ejs","shasum":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/head.ejs","shasum":"5e110e4b0a2a896a073dfc7739220025b02a4077","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/header.ejs","shasum":"d9a99aca97d8b41ed907fbf5b25df05da3ffa4f6","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/pagination.ejs","shasum":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/post/category.ejs","shasum":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/post/share.ejs","shasum":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/post/tag.ejs","shasum":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1437120006695},{"_id":"themes/hexo-theme-light/layout/_partial/post/title.ejs","shasum":"d7fbc575d35ae68f9045a382c651450e4131f335","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_partial/sidebar.ejs","shasum":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_widget/blogroll.ejs","shasum":"d42d549ad16e14b4b2ed0e891cb8f0c14bae8cbf","modified":1437126971668},{"_id":"themes/hexo-theme-light/layout/_widget/category.ejs","shasum":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_widget/recent_posts.ejs","shasum":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_widget/search.ejs","shasum":"55c707f3aa7453c305c41898ad22556edd213830","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_widget/tag.ejs","shasum":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_widget/tagcloud.ejs","shasum":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/_widget/weibo.ejs","shasum":"3f68d67e27e7018e7d3e717715d132e72135dde1","modified":1437120912185},{"_id":"themes/hexo-theme-light/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/index.ejs","shasum":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/layout.ejs","shasum":"72da76881ebf00e71d7cc196f377e37a17ec7a6f","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/page.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/post.ejs","shasum":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1437120006699},{"_id":"themes/hexo-theme-light/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_base/layout.styl","shasum":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_base/variable.styl","shasum":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/archive.styl","shasum":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/article.styl","shasum":"3750f8cb4208941864247224f1dc7a256992ba8b","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/comment.styl","shasum":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/footer.styl","shasum":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/header.styl","shasum":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/index.styl","shasum":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1437120006699},{"_id":"themes/hexo-theme-light/source/css/_partial/sidebar.styl","shasum":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1437120006703},{"_id":"themes/hexo-theme-light/source/css/_partial/syntax.styl","shasum":"8d20eb41b8ba290b6c7d520c4f2d88bb9b51d60e","modified":1437120006703},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.eot","shasum":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1437120006703},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.woff","shasum":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/css/style.styl","shasum":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1437120006711},{"_id":"themes/hexo-theme-light/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1437120006715},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.svg","shasum":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1437120006707},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.ttf","shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1437120006707},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1438680020907,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/gallery.js","modified":1438680020923,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1438680020932,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1438680020946,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1438680020961,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1438680020975,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1438680020983,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1438680021009,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1438680021024,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1438680021041,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1438680022141,"shasum":"c1f50770fa10e71f85c4b7f26bb821924de38f53"},{"_id":"public/css/font/fontawesome-webfont.woff","modified":1438680022351,"shasum":"0612cddf2f835cceffccc88fd194f97367d0b024"},{"_id":"public/css/font/fontawesome-webfont.ttf","modified":1438680022363,"shasum":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c"},{"_id":"public/css/font/fontawesome-webfont.svg","modified":1438680022375,"shasum":"d162419c91b8bab3a4fd327c933a0fcf3799c251"},{"_id":"public/css/font/fontawesome-webfont.eot","modified":1438680022394,"shasum":"d775f599ff3f23be082e6a9604b4898718923a37"},{"_id":"public/404.html","modified":1438680022483,"shasum":"11976991dc560e1d67b5d88d0099bdb267b93ea4"},{"_id":"public/tags/index.html","modified":1438680022515,"shasum":"350fa5290015cb22e0fc6bac7442131f9ebaa155"},{"_id":"public/categories/index.html","modified":1438680022539,"shasum":"0ab91586601e2c655d49cdbf77e21697482f1e82"},{"_id":"public/about/index.html","modified":1438680022566,"shasum":"b8e94006550113a687fc3d9acf3db18073d2ff87"},{"_id":"public/2015/08/04/深入浅出Node-js-前后端共用模块/index.html","modified":1438680022595,"shasum":"27205846605b0df60a79dbefa1e0853e75446747"},{"_id":"public/2015/07/31/module-exports和exports的区别/index.html","modified":1438680022639,"shasum":"c1e0bffb804f9e679b4a5c9485f36f2f59244a22"},{"_id":"public/2015/07/30/深入浅出Node-js-核心模块/index.html","modified":1438680022671,"shasum":"3dfb9eb4dd4b70a324921ea993495937e3251205"},{"_id":"public/2015/07/30/深入浅出Node-js-模块加载/index.html","modified":1438680022733,"shasum":"311670b97b70da04724552e8aebcb512bb2a893b"},{"_id":"public/2015/07/30/深入浅出Node-js-特点与应用场景/index.html","modified":1438680022757,"shasum":"cf6858d0f246edf08c43a9d48bc9eda030286982"},{"_id":"public/2015/07/21/JavaScript学习笔记之-标准全局对象-基本对象Object/index.html","modified":1438680022787,"shasum":"95abb97954ae43e44c871e5ec08de2c4ffaa58e1"},{"_id":"public/2015/07/21/JavaScript学习笔记之-标准全局对象-方法属性/index.html","modified":1438680022812,"shasum":"76527c27aafa40c23b5f7213bc9f85637d3f3b43"},{"_id":"public/2015/07/21/JavaScript学习笔记之-标准全局对象-常量属性/index.html","modified":1438680022840,"shasum":"c95d3e03e1ffaf83c72dfae762d0e90ab10a188c"},{"_id":"public/2015/07/20/JavaScript学习笔记之-编程习惯和注意点/index.html","modified":1438680022873,"shasum":"a0a15c718f0ff573e3ad18c17db0b4c22f229ff6"},{"_id":"public/2015/07/17/常用工具/index.html","modified":1438680022898,"shasum":"3306b9edc5c14ca30e266c2ae2db1ab6bbad9406"},{"_id":"public/2015/07/17/我的vagrant相关命令/index.html","modified":1438680022923,"shasum":"c5ba4e8d0eee2b0bd7ea00923d6f89b463d6c9ba"},{"_id":"public/2015/07/17/Node.js学习笔记之-常用模块/index.html","modified":1438680022948,"shasum":"5935792ff159a1d53bcfce0701c949ee5629892c"},{"_id":"public/2015/07/17/supervisor-vs-pm2-vs-forever/index.html","modified":1438680022991,"shasum":"453e49616048e57861c77a8a8de663485f368d73"},{"_id":"public/2015/07/15/hello-world/index.html","modified":1438680023019,"shasum":"060ab04b2e9830806692413429bf1347584b3ea1"},{"_id":"public/archives/index.html","modified":1438680023063,"shasum":"53b90c7fe0322548874e93ed2ebc08d577173f57"},{"_id":"public/archives/page/2/index.html","modified":1438680023090,"shasum":"1e0c5818daa8afc56e435e922eef4aa599510f12"},{"_id":"public/archives/2015/index.html","modified":1438680023127,"shasum":"5d17b9d658ec0766d7ce49b1a6594f3a79edc977"},{"_id":"public/archives/2015/page/2/index.html","modified":1438680023155,"shasum":"8215b7c73c0fa5cd3453844eed1f694de84b9962"},{"_id":"public/archives/2015/07/index.html","modified":1438680023217,"shasum":"7833a45a1dc8d48d7915cf039e1a0b037035cfda"},{"_id":"public/archives/2015/07/page/2/index.html","modified":1438680023251,"shasum":"0e4a3252c39b3695e795d6acb0b4f81f82f932a4"},{"_id":"public/archives/2015/08/index.html","modified":1438680023288,"shasum":"d78c07450cf4964ac0b4613f4f6bfa470d25859c"},{"_id":"public/index.html","modified":1438680023339,"shasum":"6863637af2e4ad0dc932cc73387edae88f231302"},{"_id":"public/page/2/index.html","modified":1438680023366,"shasum":"6b05c33f73639c875f0db107ac3fd136b6e45a02"},{"_id":"public/tags/node-js/index.html","modified":1438680023430,"shasum":"9661cc693ddaf9a9b17eca6f3c4ab4e96662b0d2"},{"_id":"public/tags/深入浅出Node-js/index.html","modified":1438680023464,"shasum":"b1b1bb080167d6bde570f8db1cd216ec5a0d7edb"},{"_id":"public/tags/备忘/index.html","modified":1438680023492,"shasum":"b7b131ee09fe7c2861060ca41d4a12991d817f88"},{"_id":"public/tags/工具/index.html","modified":1438680023517,"shasum":"3f099430602cf5bf8db2ed37fc75cdfe3a4afcbf"},{"_id":"public/tags/javascript/index.html","modified":1438680023558,"shasum":"1f50cce0756caecaa0f89211ebca41bf4c690977"}],"Category":[],"Data":[],"Page":[{"_content":"<html>\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>404</title>\n</head>\n\n<body>\n    <h1>404 Page Not Found</h1>\n    <script type=\"text/javascript\" src=\"/imgr?src=http%3A%2F%2Fwww.qq.com%2F404%2Fsearch_children.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","source":"404.html","raw":"<html>\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <title>404</title>\n</head>\n\n<body>\n    <h1>404 Page Not Found</h1>\n    <script type=\"text/javascript\" src=\"/imgr?src=http%3A%2F%2Fwww.qq.com%2F404%2Fsearch_children.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","date":"2015-07-17T09:46:19.982Z","updated":"2015-07-17T09:46:19.982Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cicx4xs4g0000uuotg7hz1ip7"},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.html","raw":"title: Tags\nlayout: tags\n---","date":"2015-07-16T05:56:50.231Z","updated":"2015-07-16T05:56:50.231Z","path":"tags/index.html","comments":1,"_id":"cicx4xs5u0001uuotcolurxb8"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.html","raw":"title: Categories\nlayout: categories\n---","date":"2015-07-16T05:56:27.827Z","updated":"2015-07-16T05:56:27.827Z","path":"categories/index.html","comments":1,"_id":"cicx4xs5x0002uuotdybdmcrg"},{"title":"About zaozaool","date":"2015-07-16T06:16:58.000Z","_content":"\n关键词：JAVA、Node.js\n\n[个人博客](http://zaozaool.github.io/)\n[GitHub](http://www.github.com/zaozaool)\n","source":"about/index.md","raw":"title: About zaozaool\ndate: 2015-07-16 06:16:58\n---\n\n关键词：JAVA、Node.js\n\n[个人博客](http://zaozaool.github.io/)\n[GitHub](http://www.github.com/zaozaool)\n","updated":"2015-07-22T11:23:32.768Z","path":"about/index.html","comments":1,"layout":"page","_id":"cicx4xs610003uuotuesw51zs"}],"Post":[{"title":"深入浅出Node.js - 特点与应用场景(1.4、1.5)","date":"2015-07-30T04:26:17.000Z","_content":"\n1.Node的特点\n- 异步I/O\n- 基于事件和回调函数\n- 单线程与子进程```child_process```\n- 跨平台\n\n2.Node的应用场景\n- I/O密集型\n- CPU密集型 可以通过编写C/C++扩展及子进程的方式实现\n- 分布式","source":"_posts/深入浅出Node-js-特点与应用场景.md","raw":"title: 深入浅出Node.js - 特点与应用场景(1.4、1.5)\ndate: 2015-07-30 04:26:17\ncategories: \ntags: [node.js, 深入浅出Node.js]\n---\n\n1.Node的特点\n- 异步I/O\n- 基于事件和回调函数\n- 单线程与子进程```child_process```\n- 跨平台\n\n2.Node的应用场景\n- I/O密集型\n- CPU密集型 可以通过编写C/C++扩展及子进程的方式实现\n- 分布式","slug":"深入浅出Node-js-特点与应用场景","published":1,"updated":"2015-07-31T05:08:55.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs650004uuot91vurzji"},{"title":"深入浅出Node.js - 模块加载(2.2)","date":"2015-07-30T04:33:30.000Z","_content":"\n1.加载模块的3个步骤\n- 路径分析\n- 文件定位\n- 编译执行\n\n2.加载顺序\n- 优先从缓存加载（无论是核心模块还是文件模块，都优先从缓存加载）\n- 核心模块的缓存检查先于文件模块的缓存检查\n- 缓存中没有的再通过路径分析、文件定位、编译执行加载\n\n3.路径分析、文件定位、模块编译\n- 模块标识符分析\n    - 核心模块，如`http`、`fs`、`path`等\n    - 以.或..开始的相对路径文件模块\n    - 以/开始的绝对路径文件模块\n        - 以.或..或/开始的标识符，`require`方法会将路径转化为真实路径，并以真实路径为索引，将编译结果存放当缓存中，使二次加载更快\n    - 非路径开始的文件模块，一般为第三方包，即自定义模块，自定义模块路径的生成规则为：\n        - 当前文件目录下的`node_modules`目录\n        - 父目录下的`node_modules`\n        - 沿路径向上逐级递归，直到根目录下的`node_modules`\n\n- 文件定位\n    - Node按照`.js、.json、.node`的次序补足扩展名（**如果是`.node`和`.json`的文件在`require`时带上扩展名**）\n    - 如果`require`的是一个目录，则Node会当做包（自定义模块）来处理，\n        - 解析`package.json`，找到main属性指定的文件进行定位，如无扩展名则进入扩展名分析的步骤\n        - 如main属性指定的文件名错误或没有`package.json`，则默认将index当做默认文件名，依次查找`index.js、index.json、index.node`\n        - 如以上2步定位失败，则进入下一个模块路径进行查找，如遍历完毕依然没有定位成功，则抛出查找失败异常\n\n- 模块编译\n    - Node中，每个文件模块都是一个对象\n    - 不同的扩展名载入方法\n        - `.js`通过`fs`模块同步读取编译\n        - `.node`是C\\C++编写的扩展文件，通过`process.dlopen()`加载最后编译生成的文件，所以`.node`模块文件不需要编译，只有加载和执行。实际上在Windows下是`.dll`文件，在*nix下是`.so`文件\n        - `.json`通过`fs`模块同步读取，用`JSON.parse()`解析返回\n        - 其他扩展名都被当做`.js`文件载入\n    - 编译成功的文件模块会将文件路径作为索引缓存在`Modele._cache`对象上（核心模块缓存到`NatvieModule._cache`对象上）\n    - 模块的`exports`、`require`、`module`、`__filename`、`__dirname`在哪儿定义的？Node在编译模块时进行头尾包装，如：\n```javascript\n(function(exports, require, module, __filename, __dirname){\n    var math = require('math');\n    exports.area = function(radius) {\n        return Math.PI * radius * radius;\n    }\n});\n```\n      达到模块间作用域隔离，包装后通过VM原生模块的`runInThisContext()`执行（类似`eval`，只有明确上下文，不污染全局）返回一个具体的function，最后将当前模块对象的`exports`、`require()`、`module`(模块对象本身)以及文件路径、文件目录作为参数传递给这个function执行\n\n","source":"_posts/深入浅出Node-js-模块加载.md","raw":"title: 深入浅出Node.js - 模块加载(2.2)\ndate: 2015-07-30 04:33:30\ncategories:\ntags: [node.js, 深入浅出Node.js]\n---\n\n1.加载模块的3个步骤\n- 路径分析\n- 文件定位\n- 编译执行\n\n2.加载顺序\n- 优先从缓存加载（无论是核心模块还是文件模块，都优先从缓存加载）\n- 核心模块的缓存检查先于文件模块的缓存检查\n- 缓存中没有的再通过路径分析、文件定位、编译执行加载\n\n3.路径分析、文件定位、模块编译\n- 模块标识符分析\n    - 核心模块，如`http`、`fs`、`path`等\n    - 以.或..开始的相对路径文件模块\n    - 以/开始的绝对路径文件模块\n        - 以.或..或/开始的标识符，`require`方法会将路径转化为真实路径，并以真实路径为索引，将编译结果存放当缓存中，使二次加载更快\n    - 非路径开始的文件模块，一般为第三方包，即自定义模块，自定义模块路径的生成规则为：\n        - 当前文件目录下的`node_modules`目录\n        - 父目录下的`node_modules`\n        - 沿路径向上逐级递归，直到根目录下的`node_modules`\n\n- 文件定位\n    - Node按照`.js、.json、.node`的次序补足扩展名（**如果是`.node`和`.json`的文件在`require`时带上扩展名**）\n    - 如果`require`的是一个目录，则Node会当做包（自定义模块）来处理，\n        - 解析`package.json`，找到main属性指定的文件进行定位，如无扩展名则进入扩展名分析的步骤\n        - 如main属性指定的文件名错误或没有`package.json`，则默认将index当做默认文件名，依次查找`index.js、index.json、index.node`\n        - 如以上2步定位失败，则进入下一个模块路径进行查找，如遍历完毕依然没有定位成功，则抛出查找失败异常\n\n- 模块编译\n    - Node中，每个文件模块都是一个对象\n    - 不同的扩展名载入方法\n        - `.js`通过`fs`模块同步读取编译\n        - `.node`是C\\C++编写的扩展文件，通过`process.dlopen()`加载最后编译生成的文件，所以`.node`模块文件不需要编译，只有加载和执行。实际上在Windows下是`.dll`文件，在*nix下是`.so`文件\n        - `.json`通过`fs`模块同步读取，用`JSON.parse()`解析返回\n        - 其他扩展名都被当做`.js`文件载入\n    - 编译成功的文件模块会将文件路径作为索引缓存在`Modele._cache`对象上（核心模块缓存到`NatvieModule._cache`对象上）\n    - 模块的`exports`、`require`、`module`、`__filename`、`__dirname`在哪儿定义的？Node在编译模块时进行头尾包装，如：\n```javascript\n(function(exports, require, module, __filename, __dirname){\n    var math = require('math');\n    exports.area = function(radius) {\n        return Math.PI * radius * radius;\n    }\n});\n```\n      达到模块间作用域隔离，包装后通过VM原生模块的`runInThisContext()`执行（类似`eval`，只有明确上下文，不污染全局）返回一个具体的function，最后将当前模块对象的`exports`、`require()`、`module`(模块对象本身)以及文件路径、文件目录作为参数传递给这个function执行\n\n","slug":"深入浅出Node-js-模块加载","published":1,"updated":"2015-07-31T05:14:12.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs6r0009uuotk0nz05p0"},{"title":"深入浅出Node.js - 核心模块(2.3)","date":"2015-07-30T09:17:10.000Z","_content":"\n1.核心模块分为C/C++编写的和JavaScript编写的两部分，C/C++文件存放在src目录下，js文件存放在lib目录下，C\\C++编写的部分称为内建模块，JavaScript编写的称为核心模块\n\n2.核心模块的编译过程\n- 编译C\\C++前，编译程序需要将所有的JavaScript模块文件编译为C/C++代码\n    - 转存为C/C++代码:先采用V8附带的`js2c.py`工具编译js模块文件为C/C++代码，并以字符串的形式存储到node命名空间，不可直接执行\n    - 编译JavaScript核心模块到缓存\n- 编译译C\\C++\n\n3.核心模块的引入流程，已os模块为例：\n`require('os')-->NativeModule.require(\"os\")-->process.binding(\"os\")-->get_builtin_module(\"node_os\")-->NODE_MODULE(node_os, reg_gunc)`\n","source":"_posts/深入浅出Node-js-核心模块.md","raw":"title: 深入浅出Node.js - 核心模块(2.3)\ndate: 2015-07-30 09:17:10\ncategories:\ntags: [node.js, 深入浅出Node.js]\n---\n\n1.核心模块分为C/C++编写的和JavaScript编写的两部分，C/C++文件存放在src目录下，js文件存放在lib目录下，C\\C++编写的部分称为内建模块，JavaScript编写的称为核心模块\n\n2.核心模块的编译过程\n- 编译C\\C++前，编译程序需要将所有的JavaScript模块文件编译为C/C++代码\n    - 转存为C/C++代码:先采用V8附带的`js2c.py`工具编译js模块文件为C/C++代码，并以字符串的形式存储到node命名空间，不可直接执行\n    - 编译JavaScript核心模块到缓存\n- 编译译C\\C++\n\n3.核心模块的引入流程，已os模块为例：\n`require('os')-->NativeModule.require(\"os\")-->process.binding(\"os\")-->get_builtin_module(\"node_os\")-->NODE_MODULE(node_os, reg_gunc)`\n","slug":"深入浅出Node-js-核心模块","published":1,"updated":"2015-08-04T05:13:07.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs73000cuuotxuq8ltvp"},{"title":"深入浅出Node.js - 前后端共用模块(2.7)","date":"2015-08-04T05:14:25.000Z","_content":"\n1.AMD规范：`define(id?, dependencies?, factory);`\n```javascript\ndefine(['dep1', 'dep2'], function(dep1, dep2){\n    return function(){};\n});\n\n```\n\n2.CMD规范：`define(factory)`\n```javascript\ndefine(function(require, exports, module){\n    //模块代码\n});\n\n```\n\n3.AMD与CMD区别\n- AMD需要在声明模块时指定所有的依赖，通过形参传递依赖到模块内，而CMD支持动态引入，即CMD 推崇依赖就近，AMD 推崇依赖前置（AMD 也支持 CMD 的写法）\n```javascript\n// CMD\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require('./b') // 依赖可以就近书写\n    b.doSomething()\n    // ...\n})\n\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    // ...\n})\n```\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n更详尽可以查看[AMD规范与CMD规范介绍](http://blog.chinaunix.net/uid-26672038-id-4112229.html)\n\n3.兼容多种模块规范（Node、AMD、CMD、常见浏览器）\n```javascript\n;(function(name, definition){\n    //检查上下文环境是否为AMD或CMD\n    var hasDefine = typeof define === 'function';\n    //检查上下文环境是否是node\n    var hasExports = typeof module !== 'undefined' && module.exports;\n    \n    if (hasDefine) {\n        //AMD、CMD\n        define(definition);\n    } else if (hasExports) {\n        //Node\n        module.exports = definition();\n    } else {\n        //将模块的执行结果挂在window变量中，在浏览器中this指向window对象\n        this[name] = definition();\n    }\n})('hello', function(){\n    var hello = function(){\n        console.log('hello world');\n    };\n    return hello;\n});\n```","source":"_posts/深入浅出Node-js-前后端共用模块.md","raw":"title: 深入浅出Node.js - 前后端共用模块(2.7)\ndate: 2015-08-04 05:14:25\ncategories:\ntags: [node.js, 深入浅出Node.js]\n---\n\n1.AMD规范：`define(id?, dependencies?, factory);`\n```javascript\ndefine(['dep1', 'dep2'], function(dep1, dep2){\n    return function(){};\n});\n\n```\n\n2.CMD规范：`define(factory)`\n```javascript\ndefine(function(require, exports, module){\n    //模块代码\n});\n\n```\n\n3.AMD与CMD区别\n- AMD需要在声明模块时指定所有的依赖，通过形参传递依赖到模块内，而CMD支持动态引入，即CMD 推崇依赖就近，AMD 推崇依赖前置（AMD 也支持 CMD 的写法）\n```javascript\n// CMD\ndefine(function(require, exports, module) {\n    var a = require('./a')\n    a.doSomething()\n    // 此处略去 100 行\n    var b = require('./b') // 依赖可以就近书写\n    b.doSomething()\n    // ...\n})\n\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    // ...\n})\n```\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n更详尽可以查看[AMD规范与CMD规范介绍](http://blog.chinaunix.net/uid-26672038-id-4112229.html)\n\n3.兼容多种模块规范（Node、AMD、CMD、常见浏览器）\n```javascript\n;(function(name, definition){\n    //检查上下文环境是否为AMD或CMD\n    var hasDefine = typeof define === 'function';\n    //检查上下文环境是否是node\n    var hasExports = typeof module !== 'undefined' && module.exports;\n    \n    if (hasDefine) {\n        //AMD、CMD\n        define(definition);\n    } else if (hasExports) {\n        //Node\n        module.exports = definition();\n    } else {\n        //将模块的执行结果挂在window变量中，在浏览器中this指向window对象\n        this[name] = definition();\n    }\n})('hello', function(){\n    var hello = function(){\n        console.log('hello world');\n    };\n    return hello;\n});\n```","slug":"深入浅出Node-js-前后端共用模块","published":1,"updated":"2015-08-04T07:38:45.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs7c000fuuot6bdy50ty"},{"title":"我的vagrant相关命令","date":"2015-07-17T06:53:09.000Z","_content":"#vagrant启动/停止\nvagrant up\nvagrant halt\n\n#启动cloud 9\nsudo node /home/vagrant/cloud9/c9sdk/server.js -p 8181 -l 0.0.0.0 -a : -w /home/vagrant/cloud9/test-express/\n\n#启动/停止mongodb\nsudo mongod --journal --fork --dbpath /home/vagrant/mongodb-linux-i686-3.0.4/data/ --logpath /home/vagrant/mongodb-linux-i686-3.0.4/logs\nkill -2 PID\n\n#git\ngit init\ngit add */filename\ngit commit -m \"message\"\ngit push -u origin master \ngit pull origin master\ngit --help\n\n#hexo\nhexo new [post|page|draft] \"name\"\nhexo server\nhexo clean\nhexo generate\nhexo deploy\nhexo --help\n","source":"_posts/我的vagrant相关命令.md","raw":"title: 我的vagrant相关命令\ndate: 2015-07-17 06:53:09\ntags: 备忘\n---\n#vagrant启动/停止\nvagrant up\nvagrant halt\n\n#启动cloud 9\nsudo node /home/vagrant/cloud9/c9sdk/server.js -p 8181 -l 0.0.0.0 -a : -w /home/vagrant/cloud9/test-express/\n\n#启动/停止mongodb\nsudo mongod --journal --fork --dbpath /home/vagrant/mongodb-linux-i686-3.0.4/data/ --logpath /home/vagrant/mongodb-linux-i686-3.0.4/logs\nkill -2 PID\n\n#git\ngit init\ngit add */filename\ngit commit -m \"message\"\ngit push -u origin master \ngit pull origin master\ngit --help\n\n#hexo\nhexo new [post|page|draft] \"name\"\nhexo server\nhexo clean\nhexo generate\nhexo deploy\nhexo --help\n","slug":"我的vagrant相关命令","published":1,"updated":"2015-07-17T06:59:21.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs7l000iuuot71qzoi4v"},{"title":"常用工具","date":"2015-07-17T07:02:55.000Z","_content":"\n#日常相关：\nFSCapture\nZoomIt\neverything\nteracopy\nPowerCmd\nSublime Text\nUltra Edit\nBeyond Compare\nPDFEdit\nClover\nCCleaner\nVirtualBox\nVMware Player\nmRemote/mRemoteNG\n\nNotepad++及常用插件\n{\n\tExplorer\n\tJSTool\n\tJSLint:JavaScript Code Quality Tool\n\tJSON Viewer\n\tLight Explorer\n\tNppExec\n\tNppExport\n\tNppFTP\n\tPoor Man's T-Sql Formatter\n\tSQL:使用SQL筛选csv文件\n\tTagView\n\tEmmet/Zen Coding\n\tFalling Bricks:NPP中的俄罗斯方块\n\tFile Switcher\n\tGOnpp:golang插件\n\tMultiClipboard\n\tPython Script:npp中的python脚本\n\tXML Tools\n}\n\n#Linux相关：\nSecureCRT&SecureFX\nputty\nFileZilla\nXSheel\nXFTP\n\n#JAVA相关：\njad\neasyexplorer\nSoapUI\n\n#数据库相关：\nSQLyog\nnavicat\nMongoVUE\nRobomongo\n\n#IDE\nCloud 9","source":"_posts/常用工具.md","raw":"title: 常用工具\ndate: 2015-07-17 07:02:55\ntags: [备忘,工具]\n---\n\n#日常相关：\nFSCapture\nZoomIt\neverything\nteracopy\nPowerCmd\nSublime Text\nUltra Edit\nBeyond Compare\nPDFEdit\nClover\nCCleaner\nVirtualBox\nVMware Player\nmRemote/mRemoteNG\n\nNotepad++及常用插件\n{\n\tExplorer\n\tJSTool\n\tJSLint:JavaScript Code Quality Tool\n\tJSON Viewer\n\tLight Explorer\n\tNppExec\n\tNppExport\n\tNppFTP\n\tPoor Man's T-Sql Formatter\n\tSQL:使用SQL筛选csv文件\n\tTagView\n\tEmmet/Zen Coding\n\tFalling Bricks:NPP中的俄罗斯方块\n\tFile Switcher\n\tGOnpp:golang插件\n\tMultiClipboard\n\tPython Script:npp中的python脚本\n\tXML Tools\n}\n\n#Linux相关：\nSecureCRT&SecureFX\nputty\nFileZilla\nXSheel\nXFTP\n\n#JAVA相关：\njad\neasyexplorer\nSoapUI\n\n#数据库相关：\nSQLyog\nnavicat\nMongoVUE\nRobomongo\n\n#IDE\nCloud 9","slug":"常用工具","published":1,"updated":"2015-07-22T11:26:24.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs7u000luuotf2y38lk1"},{"title":"supervisor vs pm2 vs forever","date":"2015-07-17T06:32:40.000Z","_content":"\n使用场合不一样:\nsupervisor 是开发环境用。\nforever 管理多个站点，每个站访问量不大，不需要监控。\npm2 网站访问量比较大，需要完整的监控界面。\n[告别node-forever,拥抱PM2](http://www.oschina.net/translate/goodbye-node-forever-hello-pm2?cmp)","source":"_posts/supervisor-vs-pm2-vs-forever.md","raw":"title: supervisor vs pm2 vs forever\ndate: 2015-07-17 06:32:40\ntags: node.js\n---\n\n使用场合不一样:\nsupervisor 是开发环境用。\nforever 管理多个站点，每个站访问量不大，不需要监控。\npm2 网站访问量比较大，需要完整的监控界面。\n[告别node-forever,拥抱PM2](http://www.oschina.net/translate/goodbye-node-forever-hello-pm2?cmp)","slug":"supervisor-vs-pm2-vs-forever","published":1,"updated":"2015-07-20T05:04:52.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs87000puuotsurg7qo9"},{"title":"module.exports和exports的区别","date":"2015-07-31T05:39:40.000Z","_content":"\n这是别人解释的[module.exports和exports的区别](http://zihua.li/2012/03/use-module-exports-or-exports-in-node)\n\n我的理解比较简单，2点：\n1.`exports`是对`module.exports`的引用\n2.而`require`引入的是`module.exports`\n\n所以如果只是这样写肯定是有问题的,这样改变了exports的引用地址\n```javascript\n    exports = something...\n```\n最保险的写法是\n```javascript\nexports = module.exports = something...\n```\n\n加属性或方法\n```javascript\n    exports.attr = something...\n    exports.method = something...\n```\n或\n```javascript\n    module.exports.attr = something...\n    module.exports.method = something...\n```\n\n轻拍...","source":"_posts/module-exports和exports的区别.md","raw":"title: module.exports和exports的区别\ndate: 2015-07-31 05:39:40\ncategories:\ntags: node.js\n---\n\n这是别人解释的[module.exports和exports的区别](http://zihua.li/2012/03/use-module-exports-or-exports-in-node)\n\n我的理解比较简单，2点：\n1.`exports`是对`module.exports`的引用\n2.而`require`引入的是`module.exports`\n\n所以如果只是这样写肯定是有问题的,这样改变了exports的引用地址\n```javascript\n    exports = something...\n```\n最保险的写法是\n```javascript\nexports = module.exports = something...\n```\n\n加属性或方法\n```javascript\n    exports.attr = something...\n    exports.method = something...\n```\n或\n```javascript\n    module.exports.attr = something...\n    module.exports.method = something...\n```\n\n轻拍...","slug":"module-exports和exports的区别","published":1,"updated":"2015-07-31T05:52:12.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs8j000ruuote83vlbw2"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-07-15T13:49:04.107Z","updated":"2015-07-15T13:49:04.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs8l000tuuot4138hdaa"},{"title":"Node.js学习笔记之 常用模块","date":"2015-07-17T06:35:12.000Z","_content":"\n1.superagent：客户端请求代理模块，抓取页面用的（lession3）\n2.cheerio：Node.js版的JQuery（lession3）\n3.eventproxy：可以控制异步并发（lession4）\n4.async：可以控制异步并发，并且可以自定义并发数（lession5）\n5.should：断言库，用于后端测试，和mocha组合使用（lession6）\n6.mocha：测试框架（lession6）\n7.istanbul：测试率覆盖工具（lession6）\n8.express：http server？过于低级，还是用一下express，能让你的生命美好一些，中等复杂度\n9.chai：断言库，用于前端测试，和mocha组合使用（lession7）\n10.phantomjs：一个拥有JavaScript API的无界面WebKit（Chrome、Safari都是有界面的WebKit），mocha-phantomjs\n11.supertest：专门用来配合express进行集成测试的，和superagent具有相同的API（lession8）\n12.mkdirp：一次性建立目标文件夹，而不是mkdir...cd...mkdir...cd...mkdir这样的模式\n13.nodemon：自动检测 node.js 代码的改动，然后自动重启应用，完全用 nodemon 命令代替 node 命令（lession8）\n14.bower：解决js的依赖管理\n15.supervisor：supervisor自动重启应用，supervisor app\n16.forever：forever可以看做是一个nodejs的守护进程，能够启动，停止，重启我们的app应用,[使用forever运行nodejs应用](http://tcrct.iteye.com/blog/2043644)\n17.pm2：PM2是Node.js应用程序的进程管理，目前已在生产环境被普遍使用,[告别node-forever,拥抱PM2](http://www.oschina.net/translate/goodbye-node-forever-hello-pm2?cmp)\n\n更多请点击[node.js常用模块巡礼](http://www.douban.com/note/303902955/)\n\n[module.exports和exports的区别](http://zihua.li/2012/03/use-module-exports-or-exports-in-node)\n\nnpm i --save 与 npm i --save-dev 的区别，devDependencies与dependencies的区别\n\nreq.query： 处理 get 请求，获取 get 请求参数\nreq.params： 处理 /:xxx 形式的 get 或 post 请求，获取请求参数\nreq.body： 处理 post 请求，获取 post 请求体\nreq.param()： 处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query\n\nejs 的标签系统非常简单，它只有以下三种标签：\n<% code %>：JavaScript 代码。\n<%= code %>：显示替换过 HTML 特殊字符的内容。\n<%- code %>：显示原始 HTML 内容。","source":"_posts/Node.js学习笔记之-常用模块.md","raw":"title: Node.js学习笔记之 常用模块\ndate: 2015-07-17 06:35:12\ncategories: \ntags: node.js\n---\n\n1.superagent：客户端请求代理模块，抓取页面用的（lession3）\n2.cheerio：Node.js版的JQuery（lession3）\n3.eventproxy：可以控制异步并发（lession4）\n4.async：可以控制异步并发，并且可以自定义并发数（lession5）\n5.should：断言库，用于后端测试，和mocha组合使用（lession6）\n6.mocha：测试框架（lession6）\n7.istanbul：测试率覆盖工具（lession6）\n8.express：http server？过于低级，还是用一下express，能让你的生命美好一些，中等复杂度\n9.chai：断言库，用于前端测试，和mocha组合使用（lession7）\n10.phantomjs：一个拥有JavaScript API的无界面WebKit（Chrome、Safari都是有界面的WebKit），mocha-phantomjs\n11.supertest：专门用来配合express进行集成测试的，和superagent具有相同的API（lession8）\n12.mkdirp：一次性建立目标文件夹，而不是mkdir...cd...mkdir...cd...mkdir这样的模式\n13.nodemon：自动检测 node.js 代码的改动，然后自动重启应用，完全用 nodemon 命令代替 node 命令（lession8）\n14.bower：解决js的依赖管理\n15.supervisor：supervisor自动重启应用，supervisor app\n16.forever：forever可以看做是一个nodejs的守护进程，能够启动，停止，重启我们的app应用,[使用forever运行nodejs应用](http://tcrct.iteye.com/blog/2043644)\n17.pm2：PM2是Node.js应用程序的进程管理，目前已在生产环境被普遍使用,[告别node-forever,拥抱PM2](http://www.oschina.net/translate/goodbye-node-forever-hello-pm2?cmp)\n\n更多请点击[node.js常用模块巡礼](http://www.douban.com/note/303902955/)\n\n[module.exports和exports的区别](http://zihua.li/2012/03/use-module-exports-or-exports-in-node)\n\nnpm i --save 与 npm i --save-dev 的区别，devDependencies与dependencies的区别\n\nreq.query： 处理 get 请求，获取 get 请求参数\nreq.params： 处理 /:xxx 形式的 get 或 post 请求，获取请求参数\nreq.body： 处理 post 请求，获取 post 请求体\nreq.param()： 处理 get 和 post 请求，但查找优先级由高到低为 req.params→req.body→req.query\n\nejs 的标签系统非常简单，它只有以下三种标签：\n<% code %>：JavaScript 代码。\n<%= code %>：显示替换过 HTML 特殊字符的内容。\n<%- code %>：显示原始 HTML 内容。","slug":"Node.js学习笔记之-常用模块","published":1,"updated":"2015-07-30T04:32:34.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs8p000uuuot5uqna4th"},{"title":"JavaScript学习笔记之 编程习惯和注意点","date":"2015-07-20T05:03:26.000Z","_content":"\n1.我们将 `<script>` 元素放在 HTML 文件底部的原因是，浏览器解析 HTML 似乎按照代码出现的顺序来的。如果 JavaScript被首先读取，它也应该影响下面的 HTML，但有时会出现问题，因为 JavaScript 会在 HTML 之前被加载，如果 JavaScript 代码出现问题则 HTML 不会被加载。所以将 JavaScript 代码放在底部是最好的选择。\n\n2.JS中的每一行都应该以一个分号结尾，以表明这一行的结束。如果你不这样做，可能会遇到意想不到的结果。\n","source":"_posts/JavaScript学习笔记之-编程习惯和注意点.md","raw":"title: 'JavaScript学习笔记之 编程习惯和注意点'\ndate: 2015-07-20 05:03:26\ncategories: \ntags: javascript\n---\n\n1.我们将 `<script>` 元素放在 HTML 文件底部的原因是，浏览器解析 HTML 似乎按照代码出现的顺序来的。如果 JavaScript被首先读取，它也应该影响下面的 HTML，但有时会出现问题，因为 JavaScript 会在 HTML 之前被加载，如果 JavaScript 代码出现问题则 HTML 不会被加载。所以将 JavaScript 代码放在底部是最好的选择。\n\n2.JS中的每一行都应该以一个分号结尾，以表明这一行的结束。如果你不这样做，可能会遇到意想不到的结果。\n","slug":"JavaScript学习笔记之-编程习惯和注意点","published":1,"updated":"2015-07-21T01:41:27.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs91000wuuotwbo5d73v"},{"title":"JavaScript学习笔记之 全局对象[方法属性]","date":"2015-07-21T01:41:20.000Z","_content":"\n1.[eval(string, [object])](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)的第一个参数是个字符串。如果字符串表示了一个表达式，eval()会对表达式求值。如果参数表示了一个或多个JavaScript声明， 那么eval()会执行声明。不要调用eval()来为算数表达式求值； JavaScript 会自动为算数表达式求值。解析JSON。\n###避免在不必要的情况下使用eval\n\n2.[isFinite(testValue)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite) 是全局的方法，不与任何对象有关系。isFinite 方法检测它参数的数值。如果参数是 NaN，正无穷大或者负无穷大，会返回false，其他返回 true。\n\n3.[parseFloat(string)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n如果参数字符串的第一个字符不能被解析成为数字,则parseFloat返回NaN.\nparseFloat 也可转换和返回Infinity值. 可以使用isFinite 函数来判断结果是否是一个优先的数值 (非Infinity, -Infinity, 或 NaN).\n\n4.[parseInt(string, radix)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)在没有指定基数，或者基数为 0 的情况下，JavaScript 作如下处理：\n- 如果字符串 string 以\"0x\"或者\"0X\"开头, 则基数是16 (16进制).\n- 如果字符串 string 以\"0\"开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，**永远都要明确给出radix参数的值**。\n- 如果字符串 string 以其它任何值开头，则基数是10 (十进制)。\n- 如果第一个字符不能被转换成数字，parseInt返回NaN。\n\n将整型数值以特定基数转换成它的字符串值可以使用 **intValue.toString(radix)**.\n\n5.[escape()、unescape()、encodeURI()、encodeURIComponent()、decodeURI()、decodeURIComponent()比较](http://www.cnblogs.com/jhxk/articles/1634359.html)\n- 传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。 \n- 进行url跳转时可以整体使用encodeURI\n- 尽量避免使用escape()和unescape()方法","source":"_posts/JavaScript学习笔记之-标准全局对象-方法属性.md","raw":"title: JavaScript学习笔记之 全局对象[方法属性]\ndate: 2015-07-21 01:41:20\ncategories:\ntags: javascript\n---\n\n1.[eval(string, [object])](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)的第一个参数是个字符串。如果字符串表示了一个表达式，eval()会对表达式求值。如果参数表示了一个或多个JavaScript声明， 那么eval()会执行声明。不要调用eval()来为算数表达式求值； JavaScript 会自动为算数表达式求值。解析JSON。\n###避免在不必要的情况下使用eval\n\n2.[isFinite(testValue)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite) 是全局的方法，不与任何对象有关系。isFinite 方法检测它参数的数值。如果参数是 NaN，正无穷大或者负无穷大，会返回false，其他返回 true。\n\n3.[parseFloat(string)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)\n如果参数字符串的第一个字符不能被解析成为数字,则parseFloat返回NaN.\nparseFloat 也可转换和返回Infinity值. 可以使用isFinite 函数来判断结果是否是一个优先的数值 (非Infinity, -Infinity, 或 NaN).\n\n4.[parseInt(string, radix)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt)在没有指定基数，或者基数为 0 的情况下，JavaScript 作如下处理：\n- 如果字符串 string 以\"0x\"或者\"0X\"开头, 则基数是16 (16进制).\n- 如果字符串 string 以\"0\"开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，**永远都要明确给出radix参数的值**。\n- 如果字符串 string 以其它任何值开头，则基数是10 (十进制)。\n- 如果第一个字符不能被转换成数字，parseInt返回NaN。\n\n将整型数值以特定基数转换成它的字符串值可以使用 **intValue.toString(radix)**.\n\n5.[escape()、unescape()、encodeURI()、encodeURIComponent()、decodeURI()、decodeURIComponent()比较](http://www.cnblogs.com/jhxk/articles/1634359.html)\n- 传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。 \n- 进行url跳转时可以整体使用encodeURI\n- 尽量避免使用escape()和unescape()方法","slug":"JavaScript学习笔记之-标准全局对象-方法属性","published":1,"updated":"2015-07-31T05:03:13.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs9a000zuuothzdun2x3"},{"title":"JavaScript学习笔记之 全局对象[常量属性]","date":"2015-07-21T01:41:20.000Z","_content":"\n1.[判断一个值是否是NaN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n等号运算符（== 和 ===） 不能被用来判断一个值是否是 NaN。必须使用 Number.isNaN() 或 [isNaN()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN) 函数。\n\n2.[Infinity](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity)、[Number.NEGATIVE_INFINITY](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY)、[Number.POSITIVE_INFINITY](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY)\n\n3.[undifined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined):必须使用严格相等运算符===,而不能使用普通的相等运算符==,因为x == undefined成立还可能是因为x为null,在JavaScript中null== undefined是返回true的.\n```javascript\nvar x;\nif (x === undefined) {\n   // 执行到这里\n} else {\n   // 不会执行到这里\n}\n```\n如果一个变量根本没有被声明,只有使用typeof判断才不会报错,用相等运算符判断会抛出异常\n```javascript\n// x没有被声明过\nif (typeof x === 'undefined') { // 不会报错\n   // these statements execute\n}\nif(x === undefined){ // 抛出ReferenceError异常\n}\n```\n不过如果要检测的变量是个全局变量,可以不使用typeof.可以通过检测全局对象的同名属性来代替\n```javascript\n// x可能没有被声明过,但如果已经声明了的话,x是个全局变量\nif (window.x === undefined) { // 即使window.x不存在,也不会报错\n   // 可能会执行到这里\n}\nif(x === undefined){ // 如果window.x不存在,则会抛出ReferenceError异常\n}\n```\n\n4.[null 是一个字面量（而不是全局对象的一个属性，undefined 是）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)\nnull 与 undefined 的不同点：\n```javascript\ntypeof null        // object (bug in ECMAScript, should be null)\ntypeof undefined   // undefined\nnull === undefined // false\nnull  == undefined // true\n```\n","source":"_posts/JavaScript学习笔记之-标准全局对象-常量属性.md","raw":"title: JavaScript学习笔记之 全局对象[常量属性]\ndate: 2015-07-21 01:41:20\ncategories:\ntags: javascript\n---\n\n1.[判断一个值是否是NaN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n等号运算符（== 和 ===） 不能被用来判断一个值是否是 NaN。必须使用 Number.isNaN() 或 [isNaN()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN) 函数。\n\n2.[Infinity](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity)、[Number.NEGATIVE_INFINITY](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY)、[Number.POSITIVE_INFINITY](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY)\n\n3.[undifined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined):必须使用严格相等运算符===,而不能使用普通的相等运算符==,因为x == undefined成立还可能是因为x为null,在JavaScript中null== undefined是返回true的.\n```javascript\nvar x;\nif (x === undefined) {\n   // 执行到这里\n} else {\n   // 不会执行到这里\n}\n```\n如果一个变量根本没有被声明,只有使用typeof判断才不会报错,用相等运算符判断会抛出异常\n```javascript\n// x没有被声明过\nif (typeof x === 'undefined') { // 不会报错\n   // these statements execute\n}\nif(x === undefined){ // 抛出ReferenceError异常\n}\n```\n不过如果要检测的变量是个全局变量,可以不使用typeof.可以通过检测全局对象的同名属性来代替\n```javascript\n// x可能没有被声明过,但如果已经声明了的话,x是个全局变量\nif (window.x === undefined) { // 即使window.x不存在,也不会报错\n   // 可能会执行到这里\n}\nif(x === undefined){ // 如果window.x不存在,则会抛出ReferenceError异常\n}\n```\n\n4.[null 是一个字面量（而不是全局对象的一个属性，undefined 是）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null)\nnull 与 undefined 的不同点：\n```javascript\ntypeof null        // object (bug in ECMAScript, should be null)\ntypeof undefined   // undefined\nnull === undefined // false\nnull  == undefined // true\n```\n","slug":"JavaScript学习笔记之-标准全局对象-常量属性","published":1,"updated":"2015-07-31T05:03:09.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs9f0011uuot7sd35alh"},{"title":"JavaScript学习笔记之 全局对象[Object]","date":"2015-07-21T06:56:05.000Z","_content":"\n1.使用[Object.create(proto, [ propertiesObject ])](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)实现类式继承\n`new Constructor()`与`Object.create(Constructor.prototype)`的区别是`new Constructor()`会执行`Constructor`的初始代码，而`Object.create`不会执行","source":"_posts/JavaScript学习笔记之-标准全局对象-基本对象Object.md","raw":"title: 'JavaScript学习笔记之 全局对象[Object]'\ndate: 2015-07-21 06:56:05\ncategories:\ntags: javascript\n---\n\n1.使用[Object.create(proto, [ propertiesObject ])](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)实现类式继承\n`new Constructor()`与`Object.create(Constructor.prototype)`的区别是`new Constructor()`会执行`Constructor`的初始代码，而`Object.create`不会执行","slug":"JavaScript学习笔记之-标准全局对象-基本对象Object","published":1,"updated":"2015-07-31T05:03:00.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cicx4xs9j0013uuotwvaiuqgb"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cicx4xs650004uuot91vurzji","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs6p0007uuotwy005r7g"},{"post_id":"cicx4xs650004uuot91vurzji","tag_id":"cicx4xs6o0006uuotf8aux6ic","_id":"cicx4xs6p0008uuotrrufdmm4"},{"post_id":"cicx4xs6r0009uuotk0nz05p0","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs6v000auuot6e17a38v"},{"post_id":"cicx4xs6r0009uuotk0nz05p0","tag_id":"cicx4xs6o0006uuotf8aux6ic","_id":"cicx4xs6v000buuothhvgwa38"},{"post_id":"cicx4xs73000cuuotxuq8ltvp","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs74000duuotpzucy7im"},{"post_id":"cicx4xs73000cuuotxuq8ltvp","tag_id":"cicx4xs6o0006uuotf8aux6ic","_id":"cicx4xs74000euuotyfy7srx0"},{"post_id":"cicx4xs7c000fuuot6bdy50ty","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs7e000guuotm41itba0"},{"post_id":"cicx4xs7c000fuuot6bdy50ty","tag_id":"cicx4xs6o0006uuotf8aux6ic","_id":"cicx4xs7e000huuot1quwbupd"},{"post_id":"cicx4xs7l000iuuot71qzoi4v","tag_id":"cicx4xs7m000juuotjt19gnjq","_id":"cicx4xs7m000kuuot97yjgs5p"},{"post_id":"cicx4xs7u000luuotf2y38lk1","tag_id":"cicx4xs7m000juuotjt19gnjq","_id":"cicx4xs7y000nuuotirr2u844"},{"post_id":"cicx4xs7u000luuotf2y38lk1","tag_id":"cicx4xs7x000muuotjod3jby1","_id":"cicx4xs7y000ouuotvbsvk3p5"},{"post_id":"cicx4xs87000puuotsurg7qo9","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs88000quuot4ozily9j"},{"post_id":"cicx4xs8j000ruuote83vlbw2","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs8j000suuotu94i3ymk"},{"post_id":"cicx4xs8p000uuuot5uqna4th","tag_id":"cicx4xs6i0005uuotv72bwh7i","_id":"cicx4xs8x000vuuotscybx13e"},{"post_id":"cicx4xs91000wuuotwbo5d73v","tag_id":"cicx4xs98000xuuotzrgsnesy","_id":"cicx4xs98000yuuot6wr2875n"},{"post_id":"cicx4xs9a000zuuothzdun2x3","tag_id":"cicx4xs98000xuuotzrgsnesy","_id":"cicx4xs9d0010uuothbhoxqlg"},{"post_id":"cicx4xs9f0011uuot7sd35alh","tag_id":"cicx4xs98000xuuotzrgsnesy","_id":"cicx4xs9g0012uuotd4jvjbwg"},{"post_id":"cicx4xs9j0013uuotwvaiuqgb","tag_id":"cicx4xs98000xuuotzrgsnesy","_id":"cicx4xs9m0014uuotq7f7t45f"}],"Tag":[{"name":"node.js","_id":"cicx4xs6i0005uuotv72bwh7i"},{"name":"深入浅出Node.js","_id":"cicx4xs6o0006uuotf8aux6ic"},{"name":"备忘","_id":"cicx4xs7m000juuotjt19gnjq"},{"name":"工具","_id":"cicx4xs7x000muuotjod3jby1"},{"name":"javascript","_id":"cicx4xs98000xuuotzrgsnesy"}]}}